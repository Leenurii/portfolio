<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üê∂ Î¶¨Ïñº Í∞ïÏïÑÏßÄ ÏºÄÏñ¥ Í≤åÏûÑ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 50%, #6c5ce7 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        .game-container {
            max-width: 900px;
            width: 100%;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 25px;
            padding: 30px;
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.2);
            text-align: center;
        }

        h1 {
            color: #2d3436;
            font-size: 2.8em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .subtitle {
            color: #636e72;
            font-size: 1.2em;
            margin-bottom: 30px;
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .info-item {
            background: linear-gradient(45deg, #6c5ce7, #a29bfe);
            color: white;
            padding: 15px 25px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 1.1em;
            box-shadow: 0 5px 15px rgba(108, 92, 231, 0.3);
        }

        .puppy-area {
            background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
            border-radius: 25px;
            padding: 40px;
            margin-bottom: 30px;
            position: relative;
            box-shadow: inset 0 5px 20px rgba(0, 0, 0, 0.1);
            border: 3px solid #e9ecef;
        }

        .puppy-container {
            position: relative;
            display: inline-block;
        }

        .puppy-image {
            width: 280px;
            height: 280px;
            border-radius: 50%;
            object-fit: cover;
            border: 5px solid #fff;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: all 0.3s ease;
            animation: breathe 3s ease-in-out infinite;
        }

        .puppy-image:hover {
            transform: scale(1.05);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
        }

        @keyframes breathe {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }

        .sound-indicator {
            position: absolute;
            top: -20px;
            right: -20px;
            background: #ff6b6b;
            color: white;
            padding: 10px;
            border-radius: 50%;
            font-size: 1.5em;
            animation: soundPulse 1.5s infinite;
            cursor: pointer;
        }

        @keyframes soundPulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.2); opacity: 0.8; }
        }

        .mood-indicator {
            position: absolute;
            bottom: -20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 1.1em;
            animation: float 2s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateX(-50%) translateY(0); }
            50% { transform: translateX(-50%) translateY(-5px); }
        }

        .actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .action-btn {
            background: linear-gradient(45deg, #00b894, #00a085);
            color: white;
            border: none;
            padding: 25px 15px;
            border-radius: 20px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 20px rgba(0, 184, 148, 0.3);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }

        .action-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0, 184, 148, 0.4);
        }

        .action-btn:active {
            transform: translateY(-2px);
        }

        .action-icon {
            font-size: 2em;
        }

        .feedback {
            font-size: 1.4em;
            font-weight: bold;
            margin: 20px 0;
            padding: 20px;
            border-radius: 15px;
            transition: all 0.3s ease;
            opacity: 0;
        }

        .feedback.show {
            opacity: 1;
        }

        .feedback.correct {
            background: linear-gradient(45deg, #00b894, #55efc4);
            color: white;
            box-shadow: 0 5px 20px rgba(0, 184, 148, 0.3);
        }

        .feedback.wrong {
            background: linear-gradient(45deg, #e17055, #fd79a8);
            color: white;
            box-shadow: 0 5px 20px rgba(225, 112, 85, 0.3);
        }

        .next-btn, .restart-btn {
            background: linear-gradient(45deg, #6c5ce7, #a29bfe);
            color: white;
            border: none;
            padding: 15px 35px;
            border-radius: 25px;
            font-size: 1.2em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 20px 0;
        }

        .next-btn:hover, .restart-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(108, 92, 231, 0.4);
        }

        .game-over {
            background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
            padding: 40px;
            border-radius: 25px;
            margin-top: 20px;
            display: none;
            box-shadow: 0 10px 30px rgba(255, 234, 167, 0.5);
        }

        .stars {
            font-size: 3em;
            margin: 20px 0;
            animation: sparkle 2s infinite;
        }

        @keyframes sparkle {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .volume-control {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.5em;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            z-index: 1000;
        }

        .difficulty-selector {
            margin-bottom: 20px;
        }

        .difficulty-btn {
            background: #ddd;
            border: none;
            padding: 10px 20px;
            margin: 0 5px;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .difficulty-btn.active {
            background: #6c5ce7;
            color: white;
        }

        @media (max-width: 768px) {
            .puppy-image {
                width: 220px;
                height: 220px;
            }
            
            .actions {
                grid-template-columns: repeat(2, 1fr);
            }
            
            h1 {
                font-size: 2.2em;
            }
        }

        .particle {
            position: absolute;
            pointer-events: none;
            animation: particleFloat 3s ease-out forwards;
        }

        @keyframes particleFloat {
            0% {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
            100% {
                opacity: 0;
                transform: translateY(-100px) scale(0.5);
            }
        }
    </style>
</head>
<body>
    <div class="volume-control" onclick="handleVolumeToggle()" id="volumeBtn">üîä</div>
    
    <div class="game-container">
        <h1>üê∂ Î¶¨Ïñº Í∞ïÏïÑÏßÄ ÏºÄÏñ¥</h1>
        <p class="subtitle">Í∞ïÏïÑÏßÄÏùò ÌëúÏ†ïÍ≥º ÏÜåÎ¶¨ÎßåÏúºÎ°ú Î¨¥ÏóáÏù¥ ÌïÑÏöîÌïúÏßÄ ÏïåÏïÑÎßûÏ∂∞Î≥¥ÏÑ∏Ïöî!</p>
        
        <div class="difficulty-selector">
            <button class="difficulty-btn active" onclick="setDifficulty('easy')">Ïâ¨ÏõÄ</button>
            <button class="difficulty-btn" onclick="setDifficulty('normal')">Î≥¥ÌÜµ</button>
            <button class="difficulty-btn" onclick="setDifficulty('hard')">Ïñ¥Î†§ÏõÄ</button>
        </div>
        
        <div class="game-info">
            <div class="info-item">Ï†êÏàò: <span id="score">0</span></div>
            <div class="info-item">Î†àÎ≤®: <span id="level">1</span></div>
            <div class="info-item">Ïó∞ÏÜç Ï†ïÎãµ: <span id="streak">0</span></div>
            <div class="info-item">ÏÉùÎ™Ö: <span id="lives">‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è</span></div>
        </div>

        <div class="puppy-area">
            <div class="puppy-container">
                <img class="puppy-image" id="puppyImage" src="https://images.unsplash.com/photo-1583337130417-3346a1be7dee?w=400&h=400&fit=crop&crop=face" alt="Í∞ïÏïÑÏßÄ">
                <div class="sound-indicator" id="soundIndicator" onclick="handleSoundClick()">üîä</div>
                <div class="mood-indicator" id="moodIndicator">üòê</div>
            </div>
        </div>

        <div class="actions">
            <button class="action-btn" onclick="makeChoice('food')">
                <div class="action-icon">üçñ</div>
                <div>Î∞• Ï£ºÍ∏∞</div>
            </button>
            <button class="action-btn" onclick="makeChoice('water')">
                <div class="action-icon">üíß</div>
                <div>Î¨º Ï£ºÍ∏∞</div>
            </button>
            <button class="action-btn" onclick="makeChoice('clean')">
                <div class="action-icon">üßπ</div>
                <div>Îò• ÏπòÏö∞Í∏∞</div>
            </button>
            <button class="action-btn" onclick="makeChoice('play')">
                <div class="action-icon">üéæ</div>
                <div>ÎÜÄÏïÑÏ£ºÍ∏∞</div>
            </button>
            <button class="action-btn" onclick="makeChoice('sleep')">
                <div class="action-icon">üò¥</div>
                <div>Ïû¨ÏõåÏ£ºÍ∏∞</div>
            </button>
            <button class="action-btn" onclick="makeChoice('bath')">
                <div class="action-icon">üõÅ</div>
                <div>Î™©ÏöïÏãúÌÇ§Í∏∞</div>
            </button>
        </div>

        <div class="feedback" id="feedback"></div>
        <button class="next-btn" id="nextBtn" onclick="nextRound()" style="display: none;">Îã§Ïùå ÎùºÏö¥Îìú</button>

        <div class="game-over" id="gameOver">
            <h2>Í≤åÏûÑ Ï¢ÖÎ£å!</h2>
            <div class="stars" id="finalStars"></div>
            <p id="finalScore"></p>
            <p id="finalMessage"></p>
            <button class="restart-btn" onclick="restartGame()">Îã§Ïãú ÏãúÏûë</button>
        </div>
    </div>

    <script>
        let score = 0;
        let level = 1;
        let lives = 3;
        let streak = 0;
        let currentNeed = '';
        let gameEnded = false;
        let soundEnabled = true;
        let difficulty = 'easy';
        let currentRoundAnswered = false;

        // Í∞ïÏïÑÏßÄ ÏÉÅÌô©Î≥Ñ Îç∞Ïù¥ÌÑ∞
        const puppyStates = {
            food: {
                images: [
                    'https://images.unsplash.com/photo-1561037404-61cd46aa615b?w=400&h=400&fit=crop&crop=face',
                    'https://images.unsplash.com/photo-1587300003388-59208cc962cb?w=400&h=400&fit=crop&crop=face'
                ],
                mood: 'üòã',
                sounds: ['bark1', 'whine1'],
                correctMsg: 'Ï†ïÎãµ! ÎßõÏûàÍ≤å Î®πÍ≥† ÏûàÏñ¥Ïöî! üçñ',
                wrongMsg: 'ÏïÑÎãàÏóêÏöî... Îã§Î•∏ Í≤ÉÏù¥ ÌïÑÏöîÌï¥Ïöî'
            },
            water: {
                images: [
                    'https://images.unsplash.com/photo-1544568100-847a948585b9?w=400&h=400&fit=crop&crop=face',
                    'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?w=400&h=400&fit=crop&crop=face'
                ],
                mood: 'üòõ',
                sounds: ['pant1', 'pant2'],
                correctMsg: 'ÎßûÏïÑÏöî! ÏãúÏõêÌïòÍ≤å ÎßàÏãúÍ≥† ÏûàÏñ¥Ïöî! üíß',
                wrongMsg: 'ÌãÄÎ†∏Ïñ¥Ïöî... Îã§Ïãú ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî'
            },
            clean: {
                images: [
                    'https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=400&h=400&fit=crop&crop=face',
                    'https://images.unsplash.com/photo-1518717758536-85ae29035b6d?w=400&h=400&fit=crop&crop=face'
                ],
                mood: 'üò∑',
                sounds: ['whine2', 'uncomfortable'],
                correctMsg: 'Íµø! Íπ®ÎÅóÌï¥Ï†∏ÏÑú Í∏∞ÎªêÌï¥Ïöî! ‚ú®',
                wrongMsg: 'ÏïÑÏßÅ Î∂àÌé∏Ìï¥Ìï¥Ïöî...'
            },
            play: {
                images: [
                    'https://images.unsplash.com/photo-1552053831-71594a27632d?w=400&h=400&fit=crop&crop=face',
                    'https://images.unsplash.com/photo-1605568427561-40dd23c2acea?w=400&h=400&fit=crop&crop=face'
                ],
                mood: 'üòÜ',
                sounds: ['excited1', 'playful'],
                correctMsg: 'ÏïºÌò∏! Ïã†ÎÇòÍ≤å ÎÜÄÍ≥† ÏûàÏñ¥Ïöî! üéæ',
                wrongMsg: 'ÏïÑÎãàÏóêÏöî... Î≠îÍ∞Ä Îã§Î•∏ Í≤å ÌïÑÏöîÌï¥Ïöî'
            },
            sleep: {
                images: [
                    'https://images.unsplash.com/photo-1583511655857-d19b40a7a54e?w=400&h=400&fit=crop&crop=face',
                    'https://images.unsplash.com/photo-1541364983171-a8ba01e95cfc?w=400&h=400&fit=crop&crop=face'
                ],
                mood: 'üò¥',
                sounds: ['tired', 'yawn'],
                correctMsg: 'ÏôÑÎ≤Ω! Ìé∏ÏïàÌûà Ïû†Îì§ÏóàÏñ¥Ïöî! üí§',
                wrongMsg: 'ÏïÑÏßÅ Ïû†Îì§ÏßÄ Î™ªÌñàÏñ¥Ïöî...'
            },
            bath: {
                images: [
                    'https://images.unsplash.com/photo-1530281700549-e82e7bf110d6?w=400&h=400&fit=crop&crop=face',
                    'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?w=400&h=400&fit=crop&crop=face'
                ],
                mood: 'ü§¢',
                sounds: ['dirty', 'uncomfortable'],
                correctMsg: 'ÏûòÌñàÏñ¥Ïöî! Íπ®ÎÅóÌï¥Ï°åÏñ¥Ïöî! üõÅ',
                wrongMsg: 'ÏïÑÏßÅ ÎçîÎü¨ÏõåÏöî...'
            }
        };

        // Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏ Ï¥àÍ∏∞Ìôî
        let audioContext;
        
        function initAudio() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                
                // Î∏åÎùºÏö∞Ï†ÄÍ∞Ä Ïò§ÎîîÏò§Î•º Ï∞®Îã®Ìïú Í≤ΩÏö∞ ÏÇ¨Ïö©Ïûê ÏÉÅÌò∏ÏûëÏö© ÌõÑ Ïû¨Í∞ú
                if (audioContext.state === 'suspended') {
                    audioContext.resume();
                }
            }
            return audioContext;
        }

        // ÏÜåÎ¶¨ ÏÉùÏÑ± Ìï®ÏàòÎì§
        function createBarkSound() {
            try {
                const ctx = initAudio();
                const oscillator = ctx.createOscillator();
                const gainNode = ctx.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(ctx.destination);
                
                oscillator.type = 'square';
                oscillator.frequency.setValueAtTime(200, ctx.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(400, ctx.currentTime + 0.1);
                oscillator.frequency.exponentialRampToValueAtTime(150, ctx.currentTime + 0.3);
                
                gainNode.gain.setValueAtTime(0.3, ctx.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 0.3);
                
                oscillator.start(ctx.currentTime);
                oscillator.stop(ctx.currentTime + 0.3);
            } catch (e) {
                console.log('Bark sound failed:', e);
            }
        }

        function createWhineSound() {
            try {
                const ctx = initAudio();
                const oscillator = ctx.createOscillator();
                const gainNode = ctx.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(ctx.destination);
                
                oscillator.type = 'sine';
                oscillator.frequency.setValueAtTime(300, ctx.currentTime);
                oscillator.frequency.linearRampToValueAtTime(500, ctx.currentTime + 0.5);
                oscillator.frequency.linearRampToValueAtTime(250, ctx.currentTime + 1);
                
                gainNode.gain.setValueAtTime(0.2, ctx.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 1);
                
                oscillator.start(ctx.currentTime);
                oscillator.stop(ctx.currentTime + 1);
            } catch (e) {
                console.log('Whine sound failed:', e);
            }
        }

        function createPantSound() {
            try {
                const ctx = initAudio();
                for (let i = 0; i < 3; i++) {
                    setTimeout(() => {
                        const oscillator = ctx.createOscillator();
                        const gainNode = ctx.createGain();
                        
                        oscillator.connect(gainNode);
                        gainNode.connect(ctx.destination);
                        
                        oscillator.type = 'sawtooth';
                        oscillator.frequency.setValueAtTime(150, ctx.currentTime);
                        
                        gainNode.gain.setValueAtTime(0.1, ctx.currentTime);
                        gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 0.2);
                        
                        oscillator.start(ctx.currentTime);
                        oscillator.stop(ctx.currentTime + 0.2);
                    }, i * 300);
                }
            } catch (e) {
                console.log('Pant sound failed:', e);
            }
        }

        const soundFunctions = {
            bark1: createBarkSound,
            bark2: createBarkSound,
            whine1: createWhineSound,
            whine2: createWhineSound,
            pant1: createPantSound,
            pant2: createPantSound,
            excited1: createBarkSound,
            playful: createBarkSound,
            tired: createWhineSound,
            yawn: createWhineSound,
            dirty: createWhineSound,
            uncomfortable: createWhineSound
        };

        // ÏÇ¨Ïö¥Îìú ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
        function handleSoundClick() {
            if (typeof playPuppySound === 'function') {
                playPuppySound();
            }
        }

        function playPuppySound() {
            if (!soundEnabled || !currentNeed) return;
            
            // Ï≤´ ÌÅ¥Î¶≠ Ïãú Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏ Ï¥àÍ∏∞Ìôî
            initAudio();
            
            const state = puppyStates[currentNeed];
            const soundKey = state.sounds[Math.floor(Math.random() * state.sounds.length)];
            const soundFunction = soundFunctions[soundKey];
            
            if (soundFunction) {
                console.log('Playing sound:', soundKey); // ÎîîÎ≤ÑÍπÖÏö©
                soundFunction();
                
                // ÏÇ¨Ïö¥Îìú Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ Ïï†ÎãàÎ©îÏù¥ÏÖò
                const indicator = document.getElementById('soundIndicator');
                indicator.style.animation = 'none';
                setTimeout(() => {
                    indicator.style.animation = 'soundPulse 0.5s ease-out';
                }, 10);
            }
        }

        function setDifficulty(newDifficulty) {
            difficulty = newDifficulty;
            document.querySelectorAll('.difficulty-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
        }

        function startNewRound() {
            if (gameEnded) return;
            
            currentRoundAnswered = false;
            const needKeys = Object.keys(puppyStates);
            const randomNeed = needKeys[Math.floor(Math.random() * needKeys.length)];
            currentNeed = randomNeed;
            
            const state = puppyStates[randomNeed];
            const randomImage = state.images[Math.floor(Math.random() * state.images.length)];
            
            // Í∞ïÏïÑÏßÄ Ïù¥ÎØ∏ÏßÄÏôÄ ÌëúÏ†ï ÏóÖÎç∞Ïù¥Ìä∏
            document.getElementById('puppyImage').src = randomImage;
            
            // ÎÇúÏù¥ÎèÑÏóê Îî∞Î•∏ ÌûåÌä∏ ÌëúÏãú
            if (difficulty === 'easy') {
                document.getElementById('moodIndicator').textContent = state.mood;
                document.getElementById('moodIndicator').style.display = 'block';
            } else if (difficulty === 'normal') {
                // 50% ÌôïÎ•†Î°ú ÌëúÏ†ï ÌûåÌä∏
                if (Math.random() < 0.5) {
                    document.getElementById('moodIndicator').textContent = state.mood;
                    document.getElementById('moodIndicator').style.display = 'block';
                } else {
                    document.getElementById('moodIndicator').style.display = 'none';
                }
            } else {
                // Ïñ¥Î†§ÏõÄ Î™®ÎìúÏóêÏÑúÎäî ÌûåÌä∏ ÏóÜÏùå
                document.getElementById('moodIndicator').style.display = 'none';
            }
            
            // ÌîºÎìúÎ∞± Ï¥àÍ∏∞Ìôî
            const feedback = document.getElementById('feedback');
            feedback.classList.remove('show', 'correct', 'wrong');
            document.getElementById('nextBtn').style.display = 'none';
            
            // ÏûêÎèôÏúºÎ°ú ÏÜåÎ¶¨ Ïû¨ÏÉù (Ïñ¥Î†§ÏõÄ Î™®ÎìúÏóêÏÑúÎäî ÏÜåÎ¶¨ÎèÑ ÏóÜÏùå)
            if (difficulty !== 'hard') {
                setTimeout(() => {
                    if (typeof playPuppySound === 'function') {
                        playPuppySound();
                    }
                }, 1000);
            }
        }

        function makeChoice(choice) {
            if (gameEnded || currentRoundAnswered) return;
            
            currentRoundAnswered = true;
            const state = puppyStates[currentNeed];
            const feedbackEl = document.getElementById('feedback');
            
            if (choice === currentNeed) {
                // Ï†ïÎãµ
                const points = level * (10 + streak * 2);
                score += points;
                streak++;
                
                feedbackEl.textContent = state.correctMsg;
                feedbackEl.className = 'feedback correct show';
                
                createSuccessParticles();
                playSuccessSound();
                
                setTimeout(() => {
                    if (score >= level * 60) {
                        level++;
                        showLevelUp();
                    }
                    nextRound();
                }, 2000);
                
            } else {
                // Ïò§Îãµ
                lives--;
                streak = 0;
                
                feedbackEl.textContent = state.wrongMsg;
                feedbackEl.className = 'feedback wrong show';
                
                playErrorSound();
                updateDisplay();
                
                if (lives <= 0) {
                    endGame();
                } else {
                    document.getElementById('nextBtn').style.display = 'inline-block';
                }
            }
        }

        function createSuccessParticles() {
            const puppyArea = document.querySelector('.puppy-area');
            for (let i = 0; i < 8; i++) {
                setTimeout(() => {
                    const particle = document.createElement('div');
                    particle.className = 'particle';
                    particle.textContent = ['‚≠ê', '‚ú®', 'üéâ', 'üíñ'][Math.floor(Math.random() * 4)];
                    particle.style.left = Math.random() * 100 + '%';
                    particle.style.top = Math.random() * 100 + '%';
                    particle.style.fontSize = (Math.random() * 20 + 20) + 'px';
                    puppyArea.appendChild(particle);
                    
                    setTimeout(() => {
                        particle.remove();
                    }, 3000);
                }, i * 100);
            }
        }

        function playSuccessSound() {
            if (!soundEnabled) return;
            
            try {
                const ctx = initAudio();
                const oscillator = ctx.createOscillator();
                const gainNode = ctx.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(ctx.destination);
                
                oscillator.type = 'sine';
                oscillator.frequency.setValueAtTime(523, ctx.currentTime);
                oscillator.frequency.setValueAtTime(659, ctx.currentTime + 0.1);
                oscillator.frequency.setValueAtTime(784, ctx.currentTime + 0.2);
                
                gainNode.gain.setValueAtTime(0.3, ctx.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 0.3);
                
                oscillator.start(ctx.currentTime);
                oscillator.stop(ctx.currentTime + 0.3);
            } catch (e) {
                console.log('Success sound failed:', e);
            }
        }

        function playErrorSound() {
            if (!soundEnabled) return;
            
            try {
                const ctx = initAudio();
                const oscillator = ctx.createOscillator();
                const gainNode = ctx.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(ctx.destination);
                
                oscillator.type = 'sawtooth';
                oscillator.frequency.setValueAtTime(200, ctx.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(100, ctx.currentTime + 0.5);
                
                gainNode.gain.setValueAtTime(0.3, ctx.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 0.5);
                
                oscillator.start(ctx.currentTime);
                oscillator.stop(ctx.currentTime + 0.5);
            } catch (e) {
                console.log('Error sound failed:', e);
            }
        }

        function showLevelUp() {
            const levelUpMsg = document.createElement('div');
            levelUpMsg.textContent = `üéâ Î†àÎ≤® ÏóÖ! Level ${level}! üéâ`;
            levelUpMsg.style.cssText = `
                position: fixed; top: 50%; left: 50%; 
                transform: translate(-50%, -50%); 
                font-size: 2.5em; color: #6c5ce7; 
                font-weight: bold; z-index: 1000; 
                background: white; padding: 20px 40px; 
                border-radius: 20px; 
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                animation: bounce 0.5s ease-out;
            `;
            document.body.appendChild(levelUpMsg);
            
            setTimeout(() => {
                levelUpMsg.remove();
            }, 3000);
        }

        // Î≥ºÎ•® ÌÜ†Í∏Ä Ìï∏Îì§Îü¨
        function handleVolumeToggle() {
            if (typeof toggleSound === 'function') {
                toggleSound();
            }
        }

        function toggleSound() {
            soundEnabled = !soundEnabled;
            document.getElementById('volumeBtn').textContent = soundEnabled ? 'üîä' : 'üîá';
        }

        function nextRound() {
            updateDisplay();
            startNewRound();
        }

        function updateDisplay() {
            document.getElementById('score').textContent = score;
            document.getElementById('level').textContent = level;
            document.getElementById('streak').textContent = streak;
            
            const heartsDisplay = '‚ù§Ô∏è'.repeat(lives) + 'üíî'.repeat(3 - lives);
            document.getElementById('lives').textContent = heartsDisplay;
        }

        function endGame() {
            gameEnded = true;
            document.getElementById('gameOver').style.display = 'block';
            
            let stars = '';
            let message = '';
            
            if (score >= 200) {
                stars = '‚≠ê‚≠ê‚≠ê';
                message = 'ÏôÄÏö∞! ÏßÑÏßú Í∞ïÏïÑÏßÄ Ï†ÑÎ¨∏Í∞ÄÎÑ§Ïöî! üèÜ';
            } else if (score >= 100) {
                stars = '‚≠ê‚≠ê
